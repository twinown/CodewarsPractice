package java_explanations.composition_agregation;
//HAS A ОТНОШЕНИЯ

//АГРЕГАЦИЯ - получение зависимостей снаружи
//ты из В имеешь доступ к методу А
//основа депенденси инжектион и инвершн
public class B {
    private final A name;

    public B(A name) {
        this.name = name;
    }

    void show() {
        name.show();
    }
}

//КОМПОЗИЦИЯ
 class C{
    private final A state;

    //сильная связь
   public C() {
       this(new A());
    }
    public C(A state){
       this.state = state;
    }

    public void show(){
       state.show();
    }
    //или
  /*  public C(){
       this.state = new A();
    }*/
}

//представь, что это активити (D), А - типо application
//ты должен создать объект А , НО
//у тебя конструктор пустой быть должен,D,тк вызывается из другого места из рефлексии, как и A
//также ты не можешь создать сам другой объект(инициализировать),который  нужен в этом объкте
//как по итогу сделать ,чтоб они взаимодействовали ? -через СЕТТЕР aka attach
//хочу из D иметь доступ к A
// используем сеттер...в андроид-мире - это называется attach ф-ция


//эту хрень ниже можно назвать как агрегация через функцию


class D{

    //есть два пути входа в объект из другого:
    //через конструктор
    //через функцию


    //вроде как тоже создаётся через рефлексию
    private A a;

    //объект этого класса создаётся через рефлексию
    public D(){
    }

//это сеттер он же аттач
    //доступ из одного объекта к другому
    public void attach(A a) {
        this.a = a;
    }

    public void detach(A a){
        a = null;
    }

    public void show(){
        a.show();
    }
}